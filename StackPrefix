#include <iostream>
#define MAX_SIZE 100
#include <stack>
#include <cstring>

class StackArray {
private:
    int top;
    int arr[MAX_SIZE];

public:
    StackArray() : top(-1) {}

    bool isEmpty() {
        return top == -1;
    }

    bool isFull() {
        return top == MAX_SIZE - 1;
    }

    void push(int value) {
        if (isFull()) {
            std::cout << "Stack overflow\n";
            return;
        }
        arr[++top] = value;
    }

    int pop() {
        if (isEmpty()) {
            std::cout << "Stack underflow\n";
            return -1;
        }
        return arr[top--];
    }

    void display() {
        if (isEmpty()) {
            std::cout << "Stack is empty\n";
            return;
        }
        std::cout << "Stack elements: ";
        for (int i = 0; i <= top; ++i) {
            std::cout << arr[i] << " ";
        }
        std::cout << "\n";
    }
};

int prefixEvaluation(const char* expression) {
    std::stack<int> s;

    for (int i = strlen(expression) - 1; i >= 0; --i) {
        if (isdigit(expression[i])) {
            s.push(expression[i] - '0');
        } else {
            int operand1 = s.top();
            s.pop();
            int operand2 = s.top();
            s.pop();

            switch (expression[i]) {
                case '+':
                    s.push(operand1 + operand2);
                    break;
                case '-':
                    s.push(operand1 - operand2);
                    break;
                case '*':
                    s.push(operand1 * operand2);
                    break;
                case '/':
                    s.push(operand1 / operand2);
                    break;
            }
        }
    }

    return s.top();
}

int main() {
    const char* prefixExpression = "+*235";
    std::cout << "Prefix Evaluation: " << prefixEvaluation(prefixExpression) << std::endl;

    return 0;
}
