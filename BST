#include <iostream>

class Node {
public:
    int key;
    Node* left;
    Node* right;

    Node(int value) : key(value), left(nullptr), right(nullptr) {}
};

class BinarySearchTree {
private:
    Node* root;

    Node* insert(Node* node, int key) {
        if (node == nullptr) {
            return new Node(key);
        }

        if (key < node->key) {
            node->left = insert(node->left, key);
        } else if (key > node->key) {
            node->right = insert(node->right, key);
        }

        return node;
    }

    Node* findMinValueNode(Node* node) {
        while (node->left != nullptr) {
            node = node->left;
        }
        return node;
    }

    Node* deleteNode(Node* node, int key) {
        if (node == nullptr) {
            return nullptr;
        }

        if (key < node->key) {
            node->left = deleteNode(node->left, key);
        } else if (key > node->key) {
            node->right = deleteNode(node->right, key);
        } else {
            // Node with only one child or no child
            if (node->left == nullptr) {
                Node* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                Node* temp = node->left;
                delete node;
                return temp;
            }

            // Node with two children
            Node* temp = findMinValueNode(node->right);
            node->key = temp->key;
            node->right = deleteNode(node->right, temp->key);
        }

        return node;
    }

    bool search(Node* node, int key) {
        if (node == nullptr) {
            return false;
        }

        if (key == node->key) {
            return true;
        } else if (key < node->key) {
            return search(node->left, key);
        } else {
            return search(node->right, key);
        }
    }

    void inorderTraversal(Node* node) {
        if (node != nullptr) {
            inorderTraversal(node->left);
            std::cout << node->key << " ";
            inorderTraversal(node->right);
        }
    }

    void preorderTraversal(Node* node) {
        if (node != nullptr) {
            std::cout << node->key << " ";
            preorderTraversal(node->left);
            preorderTraversal(node->right);
        }
    }

    void postorderTraversal(Node* node) {
        if (node != nullptr) {
            postorderTraversal(node->left);
            postorderTraversal(node->right);
            std::cout << node->key << " ";
        }
    }

    int countNodes(Node* node) {
        if (node == nullptr) {
            return 0;
        }

        return 1 + countNodes(node->left) + countNodes(node->right);
    }

public:
    BinarySearchTree() : root(nullptr) {}

    void insert(int key) {
        root = insert(root, key);
    }

    void remove(int key) {
        root = deleteNode(root, key);
    }

    bool search(int key) {
        return search(root, key);
    }

    void inorder() {
        std::cout << "Inorder Traversal: ";
        inorderTraversal(root);
        std::cout << "\n";
    }

    void preorder() {
        std::cout << "Preorder Traversal: ";
        preorderTraversal(root);
        std::cout << "\n";
    }

    void postorder() {
        std::cout << "Postorder Traversal: ";
        postorderTraversal(root);
        std::cout << "\n";
    }

    int countNodes() {
        return countNodes(root);
    }
};

int main() {
    BinarySearchTree bst;

    bst.insert(50);
    bst.insert(30);
    bst.insert(70);
    bst.insert(20);
    bst.insert(40);
    bst.insert(60);
    bst.insert(80);

    std::cout << "Inorder Traversal: ";
    bst.inorder();

    std::cout << "Preorder Traversal: ";
    bst.preorder();

    std::cout << "Postorder Traversal: ";
    bst.postorder();

    int searchKey = 40;
    std::cout << "Search for key " << searchKey << ": " << (bst.search(searchKey) ? "Found" : "Not Found") << "\n";

    int nodesCount = bst.countNodes();
    std::cout << "Number of nodes in the BST: " << nodesCount << "\n";

    // Deleting a node
    int deleteKey = 30;
    std::cout << "Deleting node with key " << deleteKey << "\n";
    bst.remove(deleteKey);

    std::cout << "Inorder Traversal after deletion: ";
    bst.inorder();

    return 0;
}
